/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ScheduleRouteImport } from './routes/schedule'
import { Route as DownloaderRouteImport } from './routes/downloader'
import { Route as ChannelsRouteImport } from './routes/channels'
import { Route as IndexRouteImport } from './routes/index'

const ScheduleRoute = ScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloaderRoute = DownloaderRouteImport.update({
  id: '/downloader',
  path: '/downloader',
  getParentRoute: () => rootRouteImport,
} as any)
const ChannelsRoute = ChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/downloader': typeof DownloaderRoute
  '/schedule': typeof ScheduleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/downloader': typeof DownloaderRoute
  '/schedule': typeof ScheduleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/downloader': typeof DownloaderRoute
  '/schedule': typeof ScheduleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/channels' | '/downloader' | '/schedule'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/channels' | '/downloader' | '/schedule'
  id: '__root__' | '/' | '/channels' | '/downloader' | '/schedule'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChannelsRoute: typeof ChannelsRoute
  DownloaderRoute: typeof DownloaderRoute
  ScheduleRoute: typeof ScheduleRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/schedule': {
      id: '/schedule'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof ScheduleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/downloader': {
      id: '/downloader'
      path: '/downloader'
      fullPath: '/downloader'
      preLoaderRoute: typeof DownloaderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/channels': {
      id: '/channels'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof ChannelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChannelsRoute: ChannelsRoute,
  DownloaderRoute: DownloaderRoute,
  ScheduleRoute: ScheduleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
